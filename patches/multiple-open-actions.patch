diff --git a/./tmp/asar-extract/dist/renderer/public/GameMain-DrRcJv1g.js b/./tmp/asar-extract/dist/renderer/public/GameMain-DrRcJv1g-new.js
index d17f64c..d315d46 100644
--- a/./tmp/asar-extract/dist/renderer/public/GameMain-DrRcJv1g.js
+++ b/./tmp/asar-extract/dist/renderer/public/GameMain-DrRcJv1g-new.js
@@ -1196,7 +1196,7 @@ const navigationStateTypes = [
 const initialState$1 = {
   isDebugInfoOpen: false,
   isLayersPanelOpen: false,
-  selectedActionCategory: null,
+  selectedActionCategories: {},
   navigationHistory: [],
   currentNavigationIndex: 0,
   userAction: "none",
@@ -1219,7 +1219,12 @@ function uiReducer(state, action) {
     case "SET_SELECTED_ACTION_CATEGORY":
       return {
         ...state,
-        selectedActionCategory: action.payload,
+        selectedActionCategories: {
+          ...state.selectedActionCategories,
+          [action.payload.navigationStateToAdd.type]: {
+          navigationHistory: [],
+          currentNavigationIndex: 0,
+        }},
         // Clear the navigation history when a new action category is selected
         navigationHistory: [],
         currentNavigationIndex: 0,
@@ -1288,7 +1293,7 @@ function uiReducer(state, action) {
     case "CLEAR_NAVIGATION_HISTORY":
       return {
         ...state,
-        selectedActionCategory: null,
+        selectedActionCategories: {},
         navigationHistory: [],
         currentNavigationIndex: 0,
         userAction: "none"
@@ -1316,11 +1321,11 @@ const UiProvider = ({ children }) => {
   const selectedSignalId = currentNavigationState?.type === "signal-details" ? currentNavigationState.itemId : null;
   const selectedPopMovementIds = currentNavigationState?.type === "pop-movement" ? currentNavigationState.itemId : null;
   const canNavigateBack = state.currentNavigationIndex > 0;
-  const handleSetSelectedActionCategory = (actionCategory) => {
-    if (actionCategory === state.selectedActionCategory) {
+  const handleSetSelectedActionCategory = (actionCategory, categoryType) => {
+    /* if (actionCategory === state.selectedActionCategories) {
       dispatch({ type: "CLEAR_NAVIGATION_HISTORY" });
       return;
-    }
+    } */
     dispatch({ type: "SET_SELECTED_ACTION_CATEGORY", payload: actionCategory });
     if (actionCategory.navigationStateToAdd) {
       dispatch({
@@ -1341,7 +1346,7 @@ const UiProvider = ({ children }) => {
         toggleDebugInfoOpen: () => dispatch({ type: "TOGGLE_DEBUG_INFO" }),
         isLayersPanelOpen: state.isLayersPanelOpen,
         toggleLayersPanel: () => dispatch({ type: "TOGGLE_LAYERS_PANEL" }),
-        selectedActionCategory: state.selectedActionCategory,
+        selectedActionCategories: state.selectedActionCategories,
         handleSetSelectedActionCategory,
         navigationHistory: state.navigationHistory,
         navigate: (direction) => dispatch({ type: "NAVIGATE", payload: direction }),
@@ -1378,10 +1383,12 @@ function ActionCategorySelector() {
   return /* @__PURE__ */ jsxRuntimeExports.jsx(TooltipProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-14 p-1.5 bg-primary-foreground/30 backdrop-blur-sm flex items-center gap-2 pointer-events-auto", children: actionCategories.map((actionCategory) => /* @__PURE__ */ jsxRuntimeExports.jsx(ActionCategoryButton, { actionCategory }, actionCategory.label)) }) });
 }
 function ActionCategoryButton({ actionCategory }) {
-  const { selectedActionCategory, handleSetSelectedActionCategory } = useUi();
+  const { selectedActionCategories, handleSetSelectedActionCategory } = useUi();
   const { clearPreview } = useMainStore();
-  const isSelected = selectedActionCategory && selectedActionCategory.label === actionCategory.label;
-  const handleClick2 = (category) => {
+  const isSelected = ('navigationStateToAdd' in actionCategory && actionCategory.navigationStateToAdd)? 
+    actionCategory.navigationStateToAdd.type in selectedActionCategories
+    : false;
+  const handleClick2 = (category, categoryType) => {
     handleSetSelectedActionCategory(category);
     clearPreview();
   };
@@ -34367,8 +34374,9 @@ const panelComponents = {
   "signal-details": SignalDetailsPanel,
   "pop-movement": PopMovementPanel
 };
-function NavigationPanel() {
-  const { currentNavigationState, clearNavigationHistory, navigate, canNavigateBack, userAction, setUserAction } = useUi();
+function NavigationPanel({actionType, actionCategory}) {
+  const { clearNavigationHistory, navigate, canNavigateBack, userAction, setUserAction } = useUi();
+  const currentNavigationState = {type: actionType};
   const setPreviewRoute = useMainStore((state) => state.setPreviewRoute);
   const confirmRouteChange = useMainStore((state) => state.confirmRouteChange);
   const [showConfirmDialog, setShowConfirmDialog] = reactExports.useState(false);
@@ -34387,9 +34395,9 @@ function NavigationPanel() {
       window.removeEventListener("nav-panel-escape", handleEscapeWithUnsavedChanges);
     };
   }, [isEditingRoute]);
-  if (currentNavigationState === null) {
+/*   if (currentNavigationState === null) {
     return null;
-  }
+  } */
   const handleBackClick = () => {
     if (isEditingRoute) {
       setPendingAction("back");
@@ -35752,7 +35760,7 @@ function TutorialOverlay({ steps }) {
   const routes = useRoutes();
   const trains = useTrains();
   const timeConfig = useTimeConfig();
-  const { selectedActionCategory, userAction } = useUi();
+  const { selectedActionCategories, userAction } = useUi();
   const currentStepData = steps[tutorial.currentStep - 1] || null;
   const isFirstStep = tutorial.currentStep === 1;
   const isLastStep = tutorial.currentStep === tutorial.totalSteps;
@@ -35994,11 +36002,11 @@ function TutorialOverlay({ steps }) {
       case 3: {
         const statisticsButton = document.querySelector('[data-tutorial="statistics-button"]');
         const dropdownOpen = statisticsButton?.getAttribute("aria-expanded") === "true";
-        const completed = selectedActionCategory?.label === "Statistics" || dropdownOpen;
+        const completed = selectedActionCategories?.label === "Statistics" || dropdownOpen;
         return { completed, hasVerification: true };
       }
       case 4:
-        return { completed: selectedActionCategory?.label === "Demand Stats", hasVerification: true };
+        return { completed: selectedActionCategories?.label === "Demand Stats", hasVerification: true };
       case 5:
         return { completed: true, hasVerification: false };
       case 6:
@@ -36006,7 +36014,7 @@ function TutorialOverlay({ steps }) {
       case 7:
         return { completed: true, hasVerification: false };
       case 8:
-        return { completed: selectedActionCategory?.label === "Construction", hasVerification: true };
+        return { completed: selectedActionCategories?.label === "Construction", hasVerification: true };
       case 9:
         return { completed: userAction.includes("station"), hasVerification: true };
       case 10:
@@ -36032,7 +36040,7 @@ function TutorialOverlay({ steps }) {
         return { completed: builtTracks.length > 0, hasVerification: true };
       }
       case 18:
-        return { completed: selectedActionCategory?.label === "Routes", hasVerification: true };
+        return { completed: selectedActionCategories?.label === "Routes", hasVerification: true };
       case 19:
         return { completed: true, hasVerification: false };
       case 20:
@@ -68938,8 +68946,8 @@ function BuildingIntersectionMarkers({ zoom }) {
   const previewTracks = usePreviewTracks();
   const tracks = useTracks();
   const buildingDetector = useBuildingDetector();
-  const { currentNavigationState } = useUi();
-  const isConstructionPanel = currentNavigationState?.type === "construction";
+  const { selectedActionCategories } = useUi();
+  const isConstructionPanel = "construction" in selectedActionCategories;
   let collisionDetails = previewTracks.validation.buildingCollisionDetails;
   if ((!collisionDetails || collisionDetails.length === 0) && buildingDetector) {
     const blueprintTracks = tracks.filter((track) => track.buildType === "blueprint");
@@ -73797,7 +73805,7 @@ function DeckglBuildingCollisionLayer() {
   const previewTracks = usePreviewTracks();
   const tracks = useTracks();
   const buildingDetector = useBuildingDetector();
-  const { currentNavigationState } = useUi();
+  const { selectedActionCategories } = useUi();
   let collidingBuildings = getCollidingBuildings(previewTracks.validation.buildingCollisionDetails);
   if (!collidingBuildings && buildingDetector) {
     const blueprintTracks = tracks.filter((track) => track.buildType === "blueprint");
@@ -73809,7 +73817,7 @@ function DeckglBuildingCollisionLayer() {
     }
   }
   const id = "building-collision";
-  const isConstructionPanel = currentNavigationState?.type === "construction";
+  const isConstructionPanel = "construction" in selectedActionCategories;
   if (!collidingBuildings || false || collidingBuildings.length === 0 || !isConstructionPanel) {
     return [];
   }
@@ -77163,7 +77171,7 @@ function Map$1() {
     roadsIndex,
     loadItem
   } = useMainStore();
-  const { userAction, currentNavigationState, selectedTrackType } = useUi();
+  const { userAction, currentNavigationState, selectedActionCategories, selectedTrackType } = useUi();
   const { resolvedTheme } = useTheme();
   const isDark = resolvedTheme === "dark";
   const [lastUpdatedPitch, setLastUpdatedPitch] = reactExports.useState(0);
@@ -77327,7 +77335,7 @@ function Map$1() {
     });
   }, [deckGLLayers, currentUserAction.customCursor]);
   const showCenterlines = layersToShow.centerlines && (currentUserAction.snappingConfig.singleTrackCenterlines || currentUserAction.snappingConfig.parallelTrackCenterlines || currentUserAction.snappingConfig.quadTrackCenterlines);
-  const isShowingDemand = currentNavigationState?.type === "demand-stats" || currentNavigationState?.type === "demand-point-details" || currentNavigationState?.type === "pop-details";
+  const isShowingDemand = Object.keys(selectedActionCategories).includes("demand-stats") || Object.keys(selectedActionCategories).includes("demand-point-details") || Object.keys(selectedActionCategories).includes("pop-details");
   return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
     /* @__PURE__ */ jsxRuntimeExports.jsx(LoadingScreen, {}),
     /* @__PURE__ */ jsxRuntimeExports.jsxs(
@@ -77643,6 +77651,14 @@ function Sounds() {
   }, [isSoundEnabled]);
   return null;
 }
+function ActionPopups() {
+  const {selectedActionCategories} = useUi();
+  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-w-full p-2 flex gap-2", children: /* @__PURE__ */ 
+    Object.entries(selectedActionCategories).map(([actionType, actionCategory]) => {
+      return jsxRuntimeExports.jsx(NavigationPanel, {actionType, actionCategory})
+    }) });
+}
+
 function GameContent() {
   const [searchParams] = useSearchParams();
   const navigate = useNavigate();
@@ -77666,7 +77682,7 @@ function GameContent() {
       /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorMessage, {}),
       /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute bottom-0 left-0 h-full w-full pointer-events-none flex flex-col z-20", children: [
         /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-1 h-full w-full overflow-hidden", children: [
-          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-w-full p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(NavigationPanel, {}) }),
+          /* @__PURE__ */  jsxRuntimeExports.jsx(ActionPopups, {}),
           /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full w-full", children: [
             /* @__PURE__ */ jsxRuntimeExports.jsx(TopBar, {}),
             /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-full flex px-2 pb-2 overflow-hidden justify-between", children: /* @__PURE__ */ jsxRuntimeExports.jsx(DebugInfo, {}) })
